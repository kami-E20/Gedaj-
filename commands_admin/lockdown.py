# lockdown.py
from telegram import Update
from telegram.ext import CommandHandler, CallbackContext

# Variable globale pour stocker l'√©tat du confinement
is_lockdown = False

# Liste des ID administrateurs autoris√©s √† activer/d√©sactiver
ADMIN_IDS = [5618445554, 879386491]  # Anthony et K√¢mƒØ

def lockdown_on(update: Update, context: CallbackContext):
    global is_lockdown
    user_id = update.effective_user.id

    if user_id in ADMIN_IDS:
        is_lockdown = True
        update.message.reply_text("üîí Mode confinement activ√©. Le bot ne r√©pondra qu‚Äôaux administrateurs.")
    else:
        update.message.reply_text("‚õî Vous n‚Äô√™tes pas autoris√© √† activer ce mode.")

def lockdown_off(update: Update, context: CallbackContext):
    global is_lockdown
    user_id = update.effective_user.id

    if user_id in ADMIN_IDS:
        is_lockdown = False
        update.message.reply_text("‚úÖ Mode confinement d√©sactiv√©. Le bot est √† nouveau actif pour tous.")
    else:
        update.message.reply_text("‚õî Vous n‚Äô√™tes pas autoris√© √† d√©sactiver ce mode.")

def lockdown_check(update: Update, context: CallbackContext):
    """
    V√©rifie si le mode confinement est activ√© et si l'utilisateur est autoris√©.
    √Ä int√©grer dans les autres handlers du bot.
    """
    global is_lockdown
    user_id = update.effective_user.id

    if is_lockdown and user_id not in ADMIN_IDS:
        update.message.reply_text("‚ö†Ô∏è Le bot est actuellement en mode confinement. R√©essayez plus tard.")
        return False
    return True

# Handlers √† ajouter dans le main.py
lockdown_handlers = [
    CommandHandler("lockdown_on", lockdown_on),
    CommandHandler("lockdown_off", lockdown_off)
]