# scripts/publish.py
"""
Orchestrateur des t√¢ches (cron) SANS notify_block et SANS import circulaire.
- Fournit toutes les fonctions attendues par scheduler.py (m√™me en placeholders).
- N'importe aucune d√©pendance fragile au niveau global.
"""

from typing import Optional, List
import os

# --- Imports optionnels et s√ªrs (si absents, on fait des placeholders) ---
try:
    from scripts.points import publier_meilleurs_abonnes as _publier_top_points
except Exception:
    _publier_top_points = None

try:
    from scripts.points_logic import sauvegarder_points_utilisateurs as _save_points
except Exception:
    _save_points = None

try:
    from scripts.backup import backup_donnees as _backup_donnees
except Exception:
    _backup_donnees = None

try:
    from scripts.fetch_cinema_news import fetch_cinema_news as _fetch_cinema_news
except Exception:
    _fetch_cinema_news = None

try:
    from scripts.fetch_anilist_news import fetch_anilist_news as _fetch_anilist_news
except Exception:
    _fetch_anilist_news = None

try:
    from scripts.notify_sorties import notify_admins_sorties as _notify_admins_sorties
except Exception:
    _notify_admins_sorties = None


# --- ADMINS : via variable d'env "ADMINS" (ids s√©par√©s par des virgules), sinon fallback ---
def _parse_admins_env() -> List[int]:
    raw = os.getenv("ADMINS", "").strip()
    ids: List[int] = []
    if raw:
        for part in raw.split(","):
            part = part.strip()
            if part.isdigit():
                try:
                    ids.append(int(part))
                except Exception:
                    pass
    return ids

ADMINS: List[int] = _parse_admins_env() or [5618445554, 879386491]


# ---------- Fonctions attendues par scheduler.py (placeholders robustes) ----------

def publier_actu_privee(bot: Optional[object] = None) -> None:
    print("üì∞ publier_actu_privee : placeholder (aucune action).")


def publier_film(bot: Optional[object] = None) -> None:
    print("üé¨ publier_film : non impl√©ment√©.")


def publier_quiz(bot: Optional[object] = None) -> None:
    print("‚ùì publier_quiz : non impl√©ment√©.")


def publier_correction(bot: Optional[object] = None) -> None:
    print("‚úÖ publier_correction : non impl√©ment√©.")


def publier_meilleurs_abonnes(bot: Optional[object] = None) -> None:
    if _publier_top_points is None:
        print("üèÖ publier_meilleurs_abonnes : indisponible (scripts.points manquant).")
        return
    try:
        _publier_top_points(bot)
    except TypeError:
        _publier_top_points()
    except Exception as e:
        print(f"‚ö†Ô∏è publier_meilleurs_abonnes a √©chou√© : {e}")


def publier_abonnes_du_mois(bot: Optional[object] = None) -> None:
    print("üéÅ publier_abonnes_du_mois : non impl√©ment√©.")


def envoyer_statistiques(bot: Optional[object] = None) -> None:
    print("üìä envoyer_statistiques : non impl√©ment√©.")


def sauvegarder_donnees(bot: Optional[object] = None) -> None:
    if _save_points is None:
        print("üíæ sauvegarder_donnees : points_logic indisponible, rien √† sauvegarder.")
        return
    try:
        print("üíæ sauvegarder_donnees : sauvegarde des points utilisateurs‚Ä¶")
        _save_points()
        print("üíæ sauvegarder_donnees : OK.")
    except Exception as e:
        print(f"‚ö†Ô∏è sauvegarder_donnees a √©chou√© : {e}")


def publier_anniversaires(bot: Optional[object] = None) -> None:
    """
    Lazy-import pour √©viter les imports circulaires :
    essaie d'abord commands_admin.anniversaire puis commands_adm.anniversaire.
    """
    envoyer_anniversaires = None
    last_err = None

    for mod in ("commands_admin.anniversaire", "commands_adm.anniversaire"):
        try:
            module = __import__(mod, fromlist=["envoyer_anniversaires"])
            envoyer_anniversaires = getattr(module, "envoyer_anniversaires", None)
            if envoyer_anniversaires:
                break
        except Exception as e:
            last_err = e

    if not envoyer_anniversaires:
        print(f"üéÇ publier_anniversaires : module anniversaire introuvable ({last_err}).")
        return

    try:
        envoyer_anniversaires(bot)
        print("üéÇ publier_anniversaires : messages envoy√©s (si anniversaires).")
    except Exception as e:
        print(f"‚ö†Ô∏è publier_anniversaires a √©chou√© : {e}")


# ---------- Notification quotidienne admins ----------

def notifier_admins_daily(bot: object) -> None:
    """
    Envoie une notification quotidienne aux admins avec :
    - anniversaires du jour (si module pr√©sent),
    - 3 actus cin√©ma (si dispo),
    - 3 actus animation (si dispo),
    - aper√ßu des sorties (si notify_admins_sorties supporte preview=True).
    """
    from datetime import datetime

    # R√©cup anniversaires (lazy-import pour √©viter cycles)
    anniversaires = []
    get_today_anniversaires = None

    for mod in ("commands_admin.anniversaire", "commands_adm.anniversaire"):
        try:
            module = __import__(mod, fromlist=["get_today_anniversaires"])
            get_today_anniversaires = getattr(module, "get_today_anniversaires", None)
            if get_today_anniversaires:
                anniversaires = get_today_anniversaires() or []
                break
        except Exception:
            pass

    today = datetime.now().strftime("%d/%m/%Y")
    header = f"üìå *Rapport quotidien Geekmania* ‚Äî {today}\n\n"

    # ---- Anniversaires ----
    if anniversaires:
        anniv_lines = [
            f"- {entry.get('nom', 'Inconnu')} ({entry.get('profession', 'Inconnu')})"
            for entry in anniversaires
        ]
        anniv_text = "üéâ *Anniversaires du jour :*\n" + "\n".join(anniv_lines)
    else:
        anniv_text = "üéâ Aucun anniversaire enregistr√© aujourd‚Äôhui."

    # ---- Actus Cin√©ma ----
    if _fetch_cinema_news:
        try:
            cinema_news = _fetch_cinema_news() or []
            cinema_text = "üé¨ *Actualit√©s Cin√©ma :*\n" + "\n".join([f"- {n}" for n in cinema_news[:3]]) if cinema_news else "üé¨ Pas de nouvelles cin√© aujourd‚Äôhui."
        except Exception:
            cinema_text = "üé¨ Pas de nouvelles cin√© aujourd‚Äôhui."
    else:
        cinema_text = "üé¨ Pas de nouvelles cin√© aujourd‚Äôhui."

    # ---- Actus Animation ----
    if _fetch_anilist_news:
        try:
            anime_news = _fetch_anilist_news() or []
            anime_text = "üå∏ *Actualit√©s Animation :*\n" + "\n".join([f"- {n}" for n in anime_news[:3]]) if anime_news else "üå∏ Pas de nouvelles animation aujourd‚Äôhui."
        except Exception:
            anime_text = "üå∏ Pas de nouvelles animation aujourd‚Äôhui."
    else:
        anime_text = "üå∏ Pas de nouvelles animation aujourd‚Äôhui."

    # ---- Sorties (aper√ßu) ----
    sorties_text = "üìÖ *Sorties √† venir :*\n"
    if _notify_admins_sorties:
        try:
            preview = _notify_admins_sorties(bot, preview=True)
            if isinstance(preview, str) and preview.strip():
                sorties_text += preview.strip()
            else:
                sorties_text += "Aucune donn√©e disponible."
        except Exception:
            sorties_text += "Aucune donn√©e disponible."
    else:
        sorties_text += "Aucune donn√©e disponible."

    # ---- Construction finale ----
    message = (
        header
        + anniv_text + "\n\n"
        + cinema_text + "\n\n"
        + anime_text + "\n\n"
        + sorties_text
    )

    # ---- Envoi aux admins ----
    for admin_id in ADMINS:
        try:
            bot.send_message(admin_id, message, parse_mode="Markdown")
        except Exception as e:
            print(f"Erreur lors de l‚Äôenvoi √† {admin_id}: {e}")

    print("‚úÖ Notification quotidienne envoy√©e aux admins.")


# ---------- Ex√©cution manuelle compl√®te ----------

def run_all(bot: Optional[object] = None) -> None:
    """
    Ex√©cute en cha√Æne les t√¢ches principales. Robuste aux fonctions manquantes.
    Ordre :
      1) Actu priv√©e
      2) Anniversaires
      3) Film
      4) Quiz
      5) Correction
      6) Classements / Stats
      7) Sauvegarde logique + Backup ZIP
    """
    print("üöÄ Lancement manuel des publications (run_all)‚Ä¶")

    try: publier_actu_privee(bot)
    except Exception as e: print(f"‚ö†Ô∏è publier_actu_privee a √©chou√© : {e}")

    try: publier_anniversaires(bot)
    except Exception as e: print(f"‚ö†Ô∏è publier_anniversaires a √©chou√© : {e}")

    try: publier_film(bot)
    except Exception as e: print(f"‚ö†Ô∏è publier_film a √©chou√© : {e}")

    try: publier_quiz(bot)
    except Exception as e: print(f"‚ö†Ô∏è publier_quiz a √©chou√© : {e}")

    try: publier_correction(bot)
    except Exception as e: print(f"‚ö†Ô∏è publier_correction a √©chou√© : {e}")

    try: publier_meilleurs_abonnes(bot)
    except Exception as e: print(f"‚ö†Ô∏è publier_meilleurs_abonnes a √©chou√© : {e}")

    try: envoyer_statistiques(bot)
    except Exception as e: print(f"‚ö†Ô∏è envoyer_statistiques a √©chou√© : {e}")

    try: sauvegarder_donnees(bot)
    except Exception as e: print(f"‚ö†Ô∏è sauvegarder_donnees a √©chou√© : {e}")

    if _backup_donnees is not None:
        try:
            print("üóÑÔ∏è backup_donnees ‚Ä¶")
            try:
                _backup_donnees(bot)
            except TypeError:
                _backup_donnees()
        except Exception as e:
            print(f"‚ö†Ô∏è backup_donnees a √©chou√© : {e}")
    else:
        print("üóÑÔ∏è backup_donnees indisponible (scripts.backup manquant).")

    print("‚úÖ run_all termin√©.")


__all__ = [
    "publier_actu_privee",
    "publier_anniversaires",
    "publier_film",
    "publier_quiz",
    "publier_correction",
    "publier_meilleurs_abonnes",
    "publier_abonnes_du_mois",
    "envoyer_statistiques",
    "sauvegarder_donnees",
    "notifier_admins_daily",
    "run_all",
]